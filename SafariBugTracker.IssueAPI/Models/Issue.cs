using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace SafariBugTracker.IssueAPI.Models
{
    public interface IIssue
    {
        public string Id { get; set; }
        public string Project { get; set; }
        public string Team { get; set; }
        public string Product { get; set; }
        public string Platform { get; set; }
        public string Category { get; set; }
        public string Version { get; set; }
        public string ExpectedResults { get; set; }
        public string ActualResults { get; set; }
        public string StepsToReproduce { get; set; }
        public string ResolveStatus { get; set; }
        public byte[] Image { get; set; }
        public string ContentType { get; set; }
        public DateTime SubmissionDate { get; set; }
        public DateTime UpdatedDate { get; set; }
        public List<Message> Messages { get; set; }
        public IssueUser OriginalAuthor { get; set; }
        public IssueUser AssignedTo { get; set; }
    }

    /// <summary>
    /// Represents issue/bug entities in the database
    /// </summary>
    public class Issue : IIssue
    {
        /* Note that by default, MongoDB generates a unique ObjectID identifier that is assigned to the 
         * _id field in a new document
         * - ex: _id":{"$oid":"5ec164353ebb44192ce213ee"}
         * - This is automatically generated by the database drivers, and will be assigned to the _id field, 
         *   so theres no need to specify it beforehand
         * - Also note that this is not a GUID, and cannot be mapped to a GUID as they have a different structure and length
         * 
         * See for details : https://www.mongodb.com/blog/post/generating-globally-unique-identifiers-for-use-with-mongodb
         *                 : https://stackoverflow.com/questions/5514111/convert-net-guid-to-mongodb-objectid
         */
        [BsonId]
        [BsonRepresentation(BsonType.ObjectId)]
        public string Id                { get; set; }

        public string Project           { get; set; }

        public string Team              { get; set; }

        public string Product           { get; set; }

        public string Platform          { get; set; }

        [Required (ErrorMessage = "Category must be specified")]
        public string Category          { get; set; }

        public string Version           { get; set; }

        [Required (ErrorMessage = "Expected result must be filled in")]
        public string ExpectedResults   { get; set; }

        [Required(ErrorMessage = "Actual results must be filled in")]
        public string ActualResults     { get; set; }

        [Required (ErrorMessage = "Steps to reproduce must be filled in")]
        public string StepsToReproduce  { get; set; }

        public string ResolveStatus     { get; set; }

        public byte[] Image             { get; set; }

        public string ContentType       { get; set; }

        [BsonRepresentation(BsonType.DateTime)]
        public DateTime SubmissionDate  { get; set; }

        [BsonRepresentation(BsonType.DateTime)]
        public DateTime UpdatedDate     { get; set; }

        public List<Message> Messages   { get; set; }

        [Required(ErrorMessage = "Issue Author Is Required")]
        public IssueUser OriginalAuthor { get; set; }

        [Required(ErrorMessage = "Issue Must Be Assigned To A User")]
        public IssueUser AssignedTo     { get; set; }
    }


    /// <summary>
    /// Defines a message posted by a user in relation to the submitted issue
    /// </summary>
    public class Message
    {
        /// <summary>
        /// Id of the account which posted the message
        /// </summary>
        public string PosterUserID { get; set; }

        /// <summary>
        /// Display name of the account at the time of posting
        /// </summary>
        public string PosterDisplayName { get; set; }

        /// <summary>
        /// Content of the message
        /// </summary>
        public string MessageContent { get; set; }

        /// <summary>
        /// Date when the message was posted
        /// </summary>
        public DateTime PostDate { get; set; }
    }


    /// <summary>
    /// Defines who was the original user who submitted the issue
    /// </summary>
    public class IssueUser
    {
        /// <summary>
        /// Id of the user who originally submitted the record
        /// </summary>
        public string UserID { get; set; }

        /// <summary>
        /// Display name of the account at the time of submitting the record
        /// </summary>
        public string DisplayName { get; set; }

        /// <summary>
        /// Date when the record was submitted
        /// </summary>
        public DateTime Date { get; set; }
    }


    #region CustomValidation


    ///// <summary>
    ///// Custom validation on all incoming issue objects. Checks that the summary 
    ///// and description isn't identical to the summary
    ///// </summary>
    ///// <param name="validationContext"> Describes the type or member on which validation is performed </param>
    ///// <returns>Collection of ValidationResults</returns>
    //public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    //{
    //    if(Summary == Description)
    //    {
    //        yield return new ValidationResult("The must not be the same as the description", new[] { nameof(Issue) });
    //    }
    //}


    #endregion
}//namespace
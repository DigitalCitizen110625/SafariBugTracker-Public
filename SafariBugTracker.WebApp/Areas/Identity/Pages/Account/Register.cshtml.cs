using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;
using SafariBugTracker.WebApp.Areas.Identity.Data;

namespace SafariBugTracker.WebApp.Areas.Identity.Pages.Account
{

    /// <summary>
    /// Auto generated by Identity server. Handles all GET, and POST requests from the corresponding registration page
    /// </summary>
    [AllowAnonymous]
    public class RegisterModel : PageModel
    {

        /// <summary>
        /// Defines the model used to store the users account details during registration
        /// </summary>
        public class InputModel
        {
            [Required]
            [PersonalData]
            [Display(Name = "First Name")]
            [StringLength(50)]
            public string FirstName { get; set; }

            [Required]
            [PersonalData]
            [Display(Name = "Last Name")]
            [StringLength(50)]
            public string LastName { get; set; }

            [Required]
            [PersonalData]
            [Display(Name = "Display Name")]
            [StringLength(25, MinimumLength = 1)]
            public string DisplayName { get; set; }

            [PersonalData]
            [Display(Name = "Position")]
            [StringLength(25)]
            public string Position { get; set; }

            [Required]
            public string Role { get; set; }

            [Required]
            [EmailAddress]
            [Display(Name = "Email")]
            [StringLength(50, MinimumLength = 6)]
            public string Email { get; set; }

            [Required]
            [DataType(DataType.Password)]
            [Display(Name = "Password")]
            [StringLength(50, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 12)]
            public string Password { get; set; }

            [DataType(DataType.Password)]
            [Display(Name = "Confirm Password")]
            [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
            public string ConfirmPassword { get; set; }
        }


        #region Fields


        /// <summary>
        /// Built in ASP.NET Core Identity SignInManager service. Provides additional functionality for account signin 
        /// related actions  
        /// </summary>
        private readonly SignInManager<UserContext> _signInManager;

        /// <summary>
        /// Built in ASP.NET Core Identity UserManager service. Provides additional functionality for managing user
        /// data in a persistence store
        /// </summary>
        private readonly UserManager<UserContext> _userManager;

        /// <summary>
        /// Built in ASP.NET Core generic interface for logging 
        /// </summary>
        private readonly ILogger<RegisterModel> _logger;

        /// <summary>
        /// Built in ASP.NET Core Identity RoleManager service. Provides additional functionality for managing user/account roles
        /// </summary>
        private readonly RoleManager<IdentityRole> _roleManager;

        ///// <summary>
        ///// Default email service used for verifying new accounts
        ///// </summary>
        //private readonly IEmailSender _emailSender;


        #endregion
        #region Properties


        /// <summary>
        /// Holds the return url after the GET and POST actions
        /// </summary>
        public string ReturnUrl { get; set; }

        /// <summary>
        /// Collection of AuthenticationSchemes for known external login providers
        /// i.e. Google, Facebook, Twitter
        /// </summary>
        public IList<AuthenticationScheme> ExternalLogins { get; set; }

        /// <summary>
        /// Form used to register an account on the page
        /// </summary>
        [BindProperty]
        public InputModel RegistrationForm { get; set; }


        #endregion


        public RegisterModel(
            UserManager<UserContext> userManager,
            SignInManager<UserContext> signInManager,
            ILogger<RegisterModel> logger,
            RoleManager<IdentityRole> roleManager
            /*IEmailSender emailSender*/)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _logger = logger;
            _roleManager = roleManager;
            //_emailSender = emailSender;
        }


        #region PublicMethods


        /// <summary>
        /// Displays the registration page with a list of the accepted external authentication sources
        /// i.e. Google, Twitter, Facebook, etc.
        /// </summary>
        /// <param name="returnUrl"> Url to redirect to once the action is complete </param>
        /// <returns> Displays the page as an async task </returns>
        public async Task OnGetAsync(string returnUrl = null)
        {
            //Gets a collection of AuthenticationSchemes for known external login providers
            //Note: The application currently does not support this feature
            ReturnUrl = returnUrl;
            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
        }


        /// <summary>
        /// Handles the account creation process. Creates a new account if no errors were detected, 
        /// otherwise, it reloads the page and prints the errors
        /// </summary>
        /// <param name="returnUrl"> Url to redirect to once the action is complete </param>
        /// <returns> Displays the page as an async task </returns>
        public async Task<IActionResult> OnPostAsync(string returnUrl = null)
        {
            //Gets a collection of AuthenticationSchemes for known external login providers
            //Note: The application currently does not support this feature
            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();

            if (!ModelState.IsValid)
            {
                //User made an error while registering, thus the registration model was invalid
                return Page();
            }

            var defaultProfileImage = System.IO.File.ReadAllBytes(@"./wwwroot/images/profileAvatar/defaultUser.svg");

            //Model was valid, so lets use that to create an object with the new accounts details
            var account = new UserContext {
                UserName = RegistrationForm.Email,
                Email = RegistrationForm.Email,
                FirstName = RegistrationForm.FirstName,
                LastName = RegistrationForm.LastName,
                DisplayName = RegistrationForm.DisplayName,
                Position = RegistrationForm.Position,
                ProfileImage = defaultProfileImage,
                ContentType = "image/svg+xml",
                Password = RegistrationForm.Password,
                RegisterDate = DateTime.Now
            };


            //Attempts to create the users account at the db
            var result = await _userManager.CreateAsync(account, RegistrationForm.Password);
            if (!result.Succeeded)
            {
                //Database returned errors with account registration, so lets display those errors
                foreach (var error in result.Errors)
                {
                    ModelState.AddModelError(string.Empty, error.Description);
                }

                //Reprint the page with the new errors
                return Page();
            }

            var role = await _roleManager.FindByNameAsync(RegistrationForm.Role);
            if (role == null)
            {

                //The users selected role doesn't exist yet, so lets create it first
                role = new IdentityRole
                {
                    Name = RegistrationForm.Role
                };
                IdentityResult roleCreationResult = await _roleManager.CreateAsync(role);
                if (!roleCreationResult.Succeeded)
                {
                    foreach (IdentityError error in roleCreationResult.Errors)
                    {
                        ModelState.AddModelError("", error.Description);
                    }
                    return Page();
                }
            }

            //Now that we've created the role, and registered the users account, lets 
            //  set their role
            role = await _roleManager.FindByNameAsync(RegistrationForm.Role);
            var user = await _userManager.FindByNameAsync(account.UserName);

            var addRoleResult = await _userManager.AddToRoleAsync(user, role.Name);
            if (!addRoleResult.Succeeded)
            {
                foreach (IdentityError error in result.Errors)
                {
                    ModelState.AddModelError("", error.Description);
                }
                return Page();
            }

            //NOTE: This section has been temporarily removed as the email service is unable to verify new accounts 
            ////Generates an email confirmation token for the specified user
            //var code = await _userManager.GenerateEmailConfirmationTokenAsync(account);
            //code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));


            ////Create the url for the user to confirm their account
            //var callbackUrl = Url.Page(
            //    "/Account/ConfirmEmail",
            //    pageHandler: null,
            //    values: new { area = "Identity", userId = account.Id, code = code },
            //    protocol: Request.Scheme);


            ////Send an email to the email address specified during the account signup
            //await _emailSender.SendEmailAsync(RegistrationForm.Email, "Confirm your email",
            //    $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");


            //Does the user need to confirm their email address for the account?
            if (_userManager.Options.SignIn.RequireConfirmedAccount)
            {
                //Redirect to the confirmation page and print their 
                return RedirectToPage("RegisterConfirmation", new { email = RegistrationForm.Email });
            }
            else
            {
                //User has confirmed their email address already, so sign them in, and take them to the main page
                await _signInManager.SignInAsync(account, isPersistent: false);
                returnUrl = returnUrl ?? Url.Content("~/");
                return LocalRedirect(returnUrl);
            }
        }


        #endregion
    }//class
}//namespace
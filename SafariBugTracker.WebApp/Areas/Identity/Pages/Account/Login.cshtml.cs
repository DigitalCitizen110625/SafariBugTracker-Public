using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;
using SafariBugTracker.WebApp.Areas.Identity.Data;

namespace SafariBugTracker.WebApp.Areas.Identity.Pages.Account
{
    /// <summary>
    /// Code behind for the login page. Generated by the Identity system. 
    /// Manages the logic and routing for all login attempts to the system. 
    /// </summary>
    [AllowAnonymous]
    public class LoginModel : PageModel
    {
        /// <summary>
        /// Model for the login form
        /// </summary>
        public class InputModel
        {
            [Required]
            [StringLength(50, MinimumLength = 6)]
            [EmailAddress]
            public string Email { get; set; }

            [Required]
            [StringLength(50, MinimumLength = 12)]
            [DataType(DataType.Password)]
            public string Password { get; set; }

            [Display(Name = "Remember me?")]
            public bool RememberMe { get; set; }
        }


        #region Fields


        /// <summary>
        /// Built in ASP.NET Core Identity UserManager service. Provides additional functionality for managing user
        /// data in a persistence store
        /// </summary>
        private readonly UserManager<UserContext> _userManager;

        /// <summary>
        /// Built in ASP.NET Core Identity SignInManager service. Provides additional functionality for account signin 
        /// related actions  
        /// </summary>
        private readonly SignInManager<UserContext> _signInManager;

        /// <summary>
        /// Built in ASP.NET Core generic interface for logging 
        /// </summary>
        private readonly ILogger<LoginModel> _logger;


        #endregion
        #region Properties


        /// <summary>
        /// Contains the contents of the login form
        /// </summary>
        [BindProperty]
        public InputModel LoginForm { get; set; }


        /// <summary>
        /// Collection of AuthenticationSchemes for known external login providers
        /// i.e. Google, Facebook, Twitter
        /// </summary>
        public IList<AuthenticationScheme> ExternalLogins { get; set; }


        /// <summary>
        /// Contains the URL where the user will be redirected to upon completion of an action
        /// </summary>
        public string ReturnUrl { get; set; }


        /// <summary>
        /// Template for the return error messages
        /// </summary>
        [TempData]
        public string ErrorMessage { get; set; }


        #endregion


        public LoginModel(SignInManager<UserContext> signInManager,
        ILogger<LoginModel> logger,
        UserManager<UserContext> userManager)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _logger = logger;
        }


        #region OnGet



        /// <summary>
        /// Prints the default login view for the user to enter their login credentials
        /// </summary>
        /// <returns>Task indicating the result of the operation</returns>
        public async Task OnGetAsync()
        {
            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                ModelState.AddModelError(string.Empty, ErrorMessage);
            }

            if (User.Identity.IsAuthenticated)
            {
                Response.Redirect("/Home");
            }

            //Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
        }

        
        #endregion
        #region OnPost


        /// <summary>
        /// Checks the posted login forms email, and password. If correct, the user
        /// is logged in and redirected to the main page
        /// </summary>
        /// <param name="returnUrl">The redirection url on a successful login </param>
        /// <returns>Task indicating the result of the operation</returns>
        public async Task<IActionResult> OnPostAsync(string returnUrl = null)
        {
            returnUrl = returnUrl ?? Url.Content("~/");

            if (!ModelState.IsValid)
            {
                //Reprint the page with a list of all the errors
                return Page();
            }

            // This doesn't count login failures towards account lockout
            // To enable password failures to trigger account lockout, set lockoutOnFailure: true
            var result = await _signInManager.PasswordSignInAsync(LoginForm.Email, LoginForm.Password, LoginForm.RememberMe, lockoutOnFailure: false);
            if (result.Succeeded)
            {
                return LocalRedirect(returnUrl);
            }
            if (result.RequiresTwoFactor)
            {
                return RedirectToPage("./LoginWith2fa", new { ReturnUrl = returnUrl, RememberMe = LoginForm.RememberMe });
            }
            if (result.IsLockedOut)
            {
                return RedirectToPage("./Lockout");
            }
            else
            {
                ModelState.AddModelError(string.Empty, "Invalid login attempt.");
                return Page();
            }
        }

        #endregion

    }//class
}//namespace